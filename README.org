* C-Json
  This is intend to be a library designed to provide total control
  over [[https://www.json.org/][JSON]] data structure in

** Data Structure
   *C-Json* provides 3 data structures. *JSON_Type*, *JSON_Dict* and
   *JSON_List*. For every structures, many useful functions are
   provided to ensure speed and security of data manipulation. See the
   documentation for more info.

** Parser
   *C-Json* implements a parser generated by [[https://www.gnu.org/software/bison/][GNU Bison]]. This parser
   can parse any file descriptor that contain valid JSON data. It can
   either parse a global list or a global dictionary.

** I/O
   *C-Json* provides basic *IO* operations on its data structures. See
   the documentaion for more info.

* Dependency
   You will need to [[https://www.gnu.org/software/bison/][GNU Bison]] have in order to be able to compile the
   library. There's no need to have *lex* or *flex*, because the
   lexer, that the parser uses, is implemented by hand.

* Build
   To build the library, simply use [[https://www.gnu.org/software/make/][GNU make]] utiliy by running *make*.

* Install
   After [[*Build][building]] the library, run *sudo make install*. This will copy
   all headers files in */usr/local/include/JSON* and the builded
   shared library in */usr/local/lib/libJSON.so*.

* Testing
   There's currently only one [[test][test]] that can be find under
   *./tests/src/test-main.c*. To execute the test, run *make
   tests*. You can also run *make grind* under the *tests* directory to
   run memory leak test with [[http://valgrind.org/][Valgrind]].

* Documentation
   The documentation is generated by [[http://www.stack.nl/~dimitri/doxygen/][Doxygen]]. To generate the
   documentation, run *make doc*.

* Usage
#+BEGIN_SRC c
  #include <JSON/json.h>   // Main json structure
  #include <JSON/parser.h> // Bison parser
  #include <JSON/io.h>     // io manipulaation

  #define DICT_SIZE 64
  #define LIST_SIZE 128

  size_t hashType(const char* key);

  int main(int argc, char* argv[])
  {
    JSON_Type* type = NULL;

    FILE* in = fopen(argv[1], "r");

    ////////////////////////////////////////////////////////////////////////////
    // The parser need the following arguments:
    // 1. A pointer to pointer of JSON_Type that will store the overall parsing
    // 2. A file descriptor to read from
    // 3. A hash function that will hash value for JSON_Dict structures
    // 4. The number of buckets for JSON_Dict structures during parsing
    // 5. The initial size of JSON_List structures during parsing
    ////////////////////////////////////////////////////////////////////////////
    if (in)
      JSON_parse(&type, in, &hashType, DICT_SIZE, LIST_SIZE);

    fclose(in);

    if (!type)
      return 1;

    JSON_PrintType(type, stdout);
    // Do stuff with type here

    JSON_FreeType(type);p

    fclose(out);

    return 0;
  }

  /*  Primitive hash function  */
  size_t hashType(const char* key)
  {
    size_t hash = 0;

    while (*key)
      hash += (size_t)(*(key++));

    return hash;
  }
#+END_SRC
